import java.util.*;
class ShortestPath{
  static final int INF = Integer.MAX_VALUE;
  
  static class Vertex{
    int v;
    int weight;
    Vertex(int _v, int _w){
      v=_v;
      weight = _w;
    }
  }
  
  static class Graph{
    private int V;
    private List<List<Vertex>>adj;
    
    Graph(int v){
      V=v;
      adj=new ArrayList<>(V);
      for(int i=0;i<V;++i){
        adj.add(new ArrayList<>());
      }
    }
    
    void addEdge(int u,int v, int weight){
      Vertex vertex = new Vertex(v,weight);
      adj.get(u).add(vertex);
    }
    
    void shortestPath(int s){
      Stack<Integer> stack=new Stack<>();
      int[] dist=new int[V];
      
      Arrays.fill(dist,INF);
      dist[s]=0;
      
      topologicalSortUtil(s,stack);
      
      while(!stack.isEmpty()){
        int u = stack.pop();
        for(Vertex vertex : adj.get(u)){
          if(dist[u] != INF && dist[vertex.v]> dist[u]+vertex.weight){
            dist[vertex.v]=dist[u]+vertex.weight;
          }
        }
      }
      //print the calculated shortest distences
      System.out.println("Shortest distances from source : "+ s +": ");
      for(int i=0;i<V;i++){
        if(dist[i] == INF){
          System.out.print("INF ");
        }else{
          System.out.print(dist[i]+"  ");
        }
      }
    }
    
    void topologicalSortUtil(int v, Stack<Integer> stack){
      Stack<Integer> tempStack = new Stack<>();
      boolean[] visited = new boolean[V];
      
      tempStack.push(v);
      visited[v]=true;
      
      while(!tempStack.isEmpty()){
        int currentVertex = tempStack.peek();
        boolean isDead=true;
        
        for(Vertex vertex : adj.get(currentVertex)){
          if(!visited[vertex.v]){
            tempStack.push(vertex.v);
            visited[vertex.v]=true;
            isDead=false;
            break;
          }
        }
        
        if(isDead){
         stack.push(tempStack.pop());
        }
      }
    }
    
  }
  public static void main(String args[]){
    ShortestPath t = new ShortestPath();
    Graph g = new Graph(6);
    g.addEdge(0,1,5);
     g.addEdge(0, 2, 3);
        g.addEdge(1, 3, 6);
        g.addEdge(1, 2, 2);
        g.addEdge(2, 4, 4);
        g.addEdge(2, 5, 2);
        g.addEdge(2, 3, 7);
        g.addEdge(3, 4, -1);
        g.addEdge(4, 5, -2);

        int s = 1;
        g.shortestPath(s);
    
    
    
  }
}
